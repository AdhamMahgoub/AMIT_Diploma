
MC2_SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000556  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f53  00000000  00000000  000006fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000928  00000000  00000000  0000264e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000964  00000000  00000000  00002f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000282  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000848  00000000  00000000  00003e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004b4  000004b4  00000548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000477c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000ec  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000ec  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_voidSetPortValue 00000024  0000043a  0000043a  000004ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_voidSetPortDirection 00000024  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_1 0000004e  00000378  00000378  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.EXTI0_CallBack 00000002  00800060  00800060  00000556  2**0
                  ALLOC
 20 .text.LCD_voidSendCMD 00000050  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_voidInit 00000052  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_voidWriteData 00000050  00000328  00000328  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000044  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SPI_initSlave 00000030  0000040a  0000040a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SPI_recieveByte 00000008  000004ac  000004ac  00000540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_11 00000014  00000498  00000498  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  000004bc  000004bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  000004be  000004be  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  000004c0  000004c0  00000554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  00000482  00000482  00000516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000004b8  000004b8  0000054c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_1>
   8:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
   c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  10:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  14:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  18:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  1c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  20:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  24:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  28:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  2c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_11>
  30:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  34:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  38:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  3c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  40:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  44:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  48:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  4c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>
  50:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  a6:	0c 94 41 02 	jmp	0x482	; 0x482 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000004b4 <__bad_interrupt>:
 4b4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

000000ae <DIO_voidSetPinDirection>:
	else 
	{
			/*	Return ERROR 	*/
	}
	return Local_u8Data;
}
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x6>
  b2:	72 c0       	rjmp	.+228    	; 0x198 <DIO_voidSetPinDirection+0xea>
  b4:	68 30       	cpi	r22, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_voidSetPinDirection+0xc>
  b8:	6f c0       	rjmp	.+222    	; 0x198 <DIO_voidSetPinDirection+0xea>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	a1 f5       	brne	.+104    	; 0x126 <DIO_voidSetPinDirection+0x78>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	89 f0       	breq	.+34     	; 0xe4 <DIO_voidSetPinDirection+0x36>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_voidSetPinDirection+0x20>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	c9 f0       	breq	.+50     	; 0xfa <DIO_voidSetPinDirection+0x4c>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	11 f1       	breq	.+68     	; 0x110 <DIO_voidSetPinDirection+0x62>
  cc:	08 95       	ret
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x2c>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x28>
  de:	82 2b       	or	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	08 95       	ret
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x42>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x3e>
  f4:	82 2b       	or	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x58>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x54>
 10a:	82 2b       	or	r24, r18
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	08 95       	ret
 110:	21 b3       	in	r18, 0x11	; 17
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x6e>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x6a>
 120:	82 2b       	or	r24, r18
 122:	81 bb       	out	0x11, r24	; 17
 124:	08 95       	ret
 126:	41 11       	cpse	r20, r1
 128:	37 c0       	rjmp	.+110    	; 0x198 <DIO_voidSetPinDirection+0xea>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_voidSetPinDirection+0xa4>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_voidSetPinDirection+0x8c>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_voidSetPinDirection+0xbc>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_voidSetPinDirection+0xd4>
 138:	08 95       	ret
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0x98>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0x94>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0xb0>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0xac>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xc8>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xc4>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinDirection+0xe0>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinDirection+0xdc>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

0000019a <DIO_voidSetPinValue>:
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <DIO_voidSetPinValue+0x6>
 19e:	72 c0       	rjmp	.+228    	; 0x284 <DIO_voidSetPinValue+0xea>
 1a0:	68 30       	cpi	r22, 0x08	; 8
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <DIO_voidSetPinValue+0xc>
 1a4:	6f c0       	rjmp	.+222    	; 0x284 <DIO_voidSetPinValue+0xea>
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	a1 f5       	brne	.+104    	; 0x212 <DIO_voidSetPinValue+0x78>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	89 f0       	breq	.+34     	; 0x1d0 <DIO_voidSetPinValue+0x36>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_voidSetPinValue+0x20>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	c9 f0       	breq	.+50     	; 0x1e6 <DIO_voidSetPinValue+0x4c>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	11 f1       	breq	.+68     	; 0x1fc <DIO_voidSetPinValue+0x62>
 1b8:	08 95       	ret
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x2c>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x28>
 1ca:	82 2b       	or	r24, r18
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
 1d0:	28 b3       	in	r18, 0x18	; 24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x42>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x3e>
 1e0:	82 2b       	or	r24, r18
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	08 95       	ret
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinValue+0x58>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinValue+0x54>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
 1fc:	22 b3       	in	r18, 0x12	; 18
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x6e>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x6a>
 20c:	82 2b       	or	r24, r18
 20e:	82 bb       	out	0x12, r24	; 18
 210:	08 95       	ret
 212:	41 11       	cpse	r20, r1
 214:	37 c0       	rjmp	.+110    	; 0x284 <DIO_voidSetPinValue+0xea>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 f0       	breq	.+36     	; 0x23e <DIO_voidSetPinValue+0xa4>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_voidSetPinValue+0x8c>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	d9 f0       	breq	.+54     	; 0x256 <DIO_voidSetPinValue+0xbc>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	29 f1       	breq	.+74     	; 0x26e <DIO_voidSetPinValue+0xd4>
 224:	08 95       	ret
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinValue+0x98>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinValue+0x94>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0xb0>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0xac>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinValue+0xc8>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinValue+0xc4>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_voidSetPinValue+0xe0>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_voidSetPinValue+0xdc>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	82 bb       	out	0x12, r24	; 18
 284:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortValue:

0000043a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 PORTID, u8 Value)
{
	
	/*		Range Check			*/
	if (PORTID < 4)
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	78 f4       	brcc	.+30     	; 0x45c <DIO_voidSetPortValue+0x22>
	{
		switch (PORTID)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	41 f0       	breq	.+16     	; 0x452 <DIO_voidSetPortValue+0x18>
 442:	28 f0       	brcs	.+10     	; 0x44e <DIO_voidSetPortValue+0x14>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	39 f0       	breq	.+14     	; 0x456 <DIO_voidSetPortValue+0x1c>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	39 f0       	breq	.+14     	; 0x45a <DIO_voidSetPortValue+0x20>
 44c:	08 95       	ret
			{	
			case PORTA	: 	PORTA_REG = Value;		break; 
 44e:	6b bb       	out	0x1b, r22	; 27
 450:	08 95       	ret
			case PORTB	: 	PORTB_REG = Value;		break; 
 452:	68 bb       	out	0x18, r22	; 24
 454:	08 95       	ret
			case PORTC	: 	PORTC_REG = Value;		break; 
 456:	65 bb       	out	0x15, r22	; 21
 458:	08 95       	ret
			case PORTD	: 	PORTD_REG = Value;		break; 
 45a:	62 bb       	out	0x12, r22	; 18
 45c:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDirection:

0000045e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 PORTID, u8 Direction)
{
	
	/*		Range Check			*/
	if (PORTID < 4)
 45e:	84 30       	cpi	r24, 0x04	; 4
 460:	78 f4       	brcc	.+30     	; 0x480 <DIO_voidSetPortDirection+0x22>
	{
		switch (PORTID)
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	41 f0       	breq	.+16     	; 0x476 <DIO_voidSetPortDirection+0x18>
 466:	28 f0       	brcs	.+10     	; 0x472 <DIO_voidSetPortDirection+0x14>
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	39 f0       	breq	.+14     	; 0x47a <DIO_voidSetPortDirection+0x1c>
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	39 f0       	breq	.+14     	; 0x47e <DIO_voidSetPortDirection+0x20>
 470:	08 95       	ret
			{	
			case PORTA	: 	DDRA_REG = Direction;		break; 
 472:	6a bb       	out	0x1a, r22	; 26
 474:	08 95       	ret
			case PORTB	: 	DDRB_REG = Direction;		break; 
 476:	67 bb       	out	0x17, r22	; 23
 478:	08 95       	ret
			case PORTC	: 	DDRC_REG = Direction;		break; 
 47a:	64 bb       	out	0x14, r22	; 20
 47c:	08 95       	ret
			case PORTD	: 	DDRD_REG = Direction;		break; 
 47e:	61 bb       	out	0x11, r22	; 17
 480:	08 95       	ret

Disassembly of section .text.__vector_1:

00000378 <__vector_1>:
void EXTI0_voidDisableInterrupt(void)
{
	CLR_BIT(GICR,6); //hwa katebha set 
}
void __vector_1	(void)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	
	/*	Solutions that weren't possible -- only for illustration					*/
	/*	pf();		 	-- address of the function 									*/
	/*	EXTI0_fun(); 	-- can't call the function here -- it's in the main.c 		*/
	
	EXTI0_CallBack();
 39a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a2:	09 95       	icall
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

Disassembly of section .text.LCD_voidSendCMD:

000002d8 <LCD_voidSendCMD>:
	LCD_voidSendCMD (set_DDRAM_address);		//set DDRAM address         	Cursor at home position 
											
}

void LCD_voidSendCMD(u8 CMD)
{
 2d8:	cf 93       	push	r28
 2da:	c8 2f       	mov	r28, r24
    2. RW 	= 0
    3. EN 	= pulse 
    4. DATA =  CMD
	*/
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS, LOW);		/*		1- RS = 0		*/
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW, LOW);		/*		2- RW = 0		*/
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	/*		3- EN pulse		*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	/*		4- SEND CMD		*/
	DIO_voidSetPortValue(LCD_DATA_PORT, CMD);
 2fa:	6c 2f       	mov	r22, r28
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_voidSetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	87 e8       	ldi	r24, 0x87	; 135
 304:	93 e1       	ldi	r25, 0x13	; 19
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_voidSendCMD+0x2e>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_voidSendCMD+0x34>
 30c:	00 00       	nop
	_delay_ms(20);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, LOW);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 318:	87 e8       	ldi	r24, 0x87	; 135
 31a:	93 e1       	ldi	r25, 0x13	; 19
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_voidSendCMD+0x44>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_voidSendCMD+0x4a>
 322:	00 00       	nop
	_delay_ms(20);										
}
 324:	cf 91       	pop	r28
 326:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

00000286 <LCD_voidInit>:
//need to include delay -- will be added in the main.c file 
//note that i didn't need to include the DIO_private.h -- because i didn't need it 

void LCD_voidInit(void)
{ 
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0xFF); 		//all pins are OUTPUT (DATA_PORT)
 286:	6f ef       	ldi	r22, 0xFF	; 255
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_voidSetPortDirection>
	//DIO_voidSetPortDirection(LCD_CONTROL_PORT, 0xFF); 	//all pins are OUTPUT (CONTROL_PORT)
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, PIN0, OUTPUT);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, PIN1, OUTPUT);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, PIN2, OUTPUT);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 2ac:	81 ef       	ldi	r24, 0xF1	; 241
 2ae:	9b e2       	ldi	r25, 0x2B	; 43
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_voidInit+0x2a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_voidInit+0x30>
 2b6:	00 00       	nop
	
	_delay_ms(45); 				/*	LCD Power ON delay always > 15ms	*/
	
	
												
	LCD_voidSendCMD (function_set);		    	//function set 					Initialization of 16x2 LCD in 8 bit mode 
 2b8:	88 e3       	ldi	r24, 0x38	; 56
 2ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_voidSendCMD>
	LCD_voidSendCMD (display_on_off_control);	//display on/off control      	Display ON Cursor OFF  
 2be:	8e e0       	ldi	r24, 0x0E	; 14
 2c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_voidSendCMD>
	LCD_voidSendCMD (entry_mode_set);		    //entry mode set              	Auto Increment Cursor 
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_voidSendCMD>
	LCD_voidSendCMD (clear_display);		    //clear display              	Clear display  
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_voidSendCMD>
	LCD_voidSendCMD (set_DDRAM_address);		//set DDRAM address         	Cursor at home position 
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_voidSendCMD>
 2d6:	08 95       	ret

Disassembly of section .text.LCD_voidWriteData:

00000328 <LCD_voidWriteData>:
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, LOW);
	_delay_ms(20);										
}

void LCD_voidWriteData(u8 Data)
{
 328:	cf 93       	push	r28
 32a:	c8 2f       	mov	r28, r24
    3. EN 	= pulse 
    4. DATA =  CMD
	*/
	

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS, HIGH); 	/*		1- RS = 1		*/
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RW, LOW);		/*		2- RW = 0		*/
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	/*		3- EN pulse		*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, HIGH);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
	/*		4- SEND CMD		*/
	DIO_voidSetPortValue(LCD_DATA_PORT, Data);
 34a:	6c 2f       	mov	r22, r28
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_voidSetPortValue>
 352:	83 ed       	ldi	r24, 0xD3	; 211
 354:	90 e3       	ldi	r25, 0x30	; 48
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_voidWriteData+0x2e>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_voidWriteData+0x34>
 35c:	00 00       	nop
	_delay_ms(50);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, LOW); 
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 368:	83 ed       	ldi	r24, 0xD3	; 211
 36a:	90 e3       	ldi	r25, 0x30	; 48
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_voidWriteData+0x44>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_voidWriteData+0x4a>
 372:	00 00       	nop
	_delay_ms(50);										
}
 374:	cf 91       	pop	r28
 376:	08 95       	ret

Disassembly of section .text.main:

000003c6 <main>:

int main(void)
{

	/*	LED	Init	*/
	DIO_voidSetPinDirection(PORTC, PIN0, OUTPUT);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	
	/*	LCD_Init	*/
	LCD_voidInit();
 3d0:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidInit>
			
	/*	SPI Slave Init	*/			
	SPI_initSlave(); 
 3d4:	0e 94 05 02 	call	0x40a	; 0x40a <SPI_initSlave>
	u8 data;
	
				
	while(1)
    {
		data = SPI_recieveByte();
 3d8:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_recieveByte>
 3dc:	c8 2f       	mov	r28, r24
		if(data == '1')
 3de:	81 33       	cpi	r24, 0x31	; 49
 3e0:	49 f4       	brne	.+18     	; 0x3f4 <main+0x2e>
		{
			DIO_voidSetPinValue(PORTC, PIN0, HIGH);	  
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
			LCD_voidWriteData(data);
 3ec:	8c 2f       	mov	r24, r28
 3ee:	0e 94 94 01 	call	0x328	; 0x328 <LCD_voidWriteData>
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <main+0x12>
		}
		else if(data == '0')
 3f4:	80 33       	cpi	r24, 0x30	; 48
 3f6:	81 f7       	brne	.-32     	; 0x3d8 <main+0x12>
		{
			DIO_voidSetPinValue(PORTC, PIN0, LOW);	
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
			LCD_voidWriteData(data);
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 94 01 	call	0x328	; 0x328 <LCD_voidWriteData>
 408:	e7 cf       	rjmp	.-50     	; 0x3d8 <main+0x12>

Disassembly of section .text.SPI_initSlave:

0000040a <SPI_initSlave>:
	//	Send Data by SPI
	SPDR = data;
	
	//	Wait until SPI Interrupt Flag = 1 (data sent correctly)
	while(GET_BIT(SPSR, SPIF_bit)==0);
}
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	65 e0       	ldi	r22, 0x05	; 5
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	66 e0       	ldi	r22, 0x06	; 6
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	67 e0       	ldi	r22, 0x07	; 7
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 432:	8d b1       	in	r24, 0x0d	; 13
 434:	80 64       	ori	r24, 0x40	; 64
 436:	8d b9       	out	0x0d, r24	; 13
 438:	08 95       	ret

Disassembly of section .text.SPI_recieveByte:

000004ac <SPI_recieveByte>:

u8		SPI_recieveByte(void)
{
	//	Wait until SPI Interrupt Flag = 1 (data received correctly)
	while(GET_BIT(SPSR, SPIF_bit)==0);
 4ac:	77 9b       	sbis	0x0e, 7	; 14
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <SPI_recieveByte>
	
	// Return the Receive Byte from SPI data Register
	return(SPDR);
 4b0:	8f b1       	in	r24, 0x0f	; 15
}
 4b2:	08 95       	ret

Disassembly of section .text.__vector_11:

00000498 <__vector_11>:

u32 ISR_Counter	= 0;
u32 time_counter = 0;

ISR (TIMER0_OVF_vect)				
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
	// do nothing 
}
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000004bc <_fini>:
 4bc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004be <__funcs_on_exit>:
 4be:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004c0 <__simulator_exit>:
 4c0:	08 95       	ret

Disassembly of section .text.exit:

00000482 <exit>:
 482:	ec 01       	movw	r28, r24
 484:	0e 94 5f 02 	call	0x4be	; 0x4be <__funcs_on_exit>
 488:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_fini>
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__simulator_exit>
 492:	ce 01       	movw	r24, r28
 494:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Exit>

Disassembly of section .text._Exit:

000004b8 <_Exit>:
 4b8:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
