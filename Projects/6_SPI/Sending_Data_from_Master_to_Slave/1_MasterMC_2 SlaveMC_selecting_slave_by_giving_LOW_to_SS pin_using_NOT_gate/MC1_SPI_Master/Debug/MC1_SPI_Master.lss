
MC1_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a2  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003d1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000167b  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000798  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064e  00000000  00000000  00002302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ed  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d1  00000000  00000000  00002d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000300  00000300  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000ec  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_u8GetPinValue 0000006c  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000004e  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.EXTI0_CallBack 00000002  00800060  00800060  000003a2  2**0
                  ALLOC
 18 .text.main    00000044  00000254  00000254  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SPI_initMaster 00000036  00000298  00000298  0000032c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_sendByte 00000008  000002f8  000002f8  0000038c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_11 00000014  000002e4  000002e4  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  00000308  00000308  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  0000030a  0000030a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000002ce  000002ce  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000304  00000304  00000398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_1>
   8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
   c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  a6:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000300 <__bad_interrupt>:
 300:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

000000ae <DIO_voidSetPinDirection>:
			switch (PORTID)
			{	
			case PORTA	: 	CLR_BIT(PORTA_REG, PINID);		break; 
			case PORTB	: 	CLR_BIT(PORTB_REG, PINID);		break; 
			case PORTC	: 	CLR_BIT(PORTC_REG, PINID);		break; 
			case PORTD	: 	CLR_BIT(PORTD_REG, PINID);		break; 
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x6>
  b2:	72 c0       	rjmp	.+228    	; 0x198 <DIO_voidSetPinDirection+0xea>
  b4:	68 30       	cpi	r22, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_voidSetPinDirection+0xc>
  b8:	6f c0       	rjmp	.+222    	; 0x198 <DIO_voidSetPinDirection+0xea>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	a1 f5       	brne	.+104    	; 0x126 <DIO_voidSetPinDirection+0x78>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	89 f0       	breq	.+34     	; 0xe4 <DIO_voidSetPinDirection+0x36>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_voidSetPinDirection+0x20>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	c9 f0       	breq	.+50     	; 0xfa <DIO_voidSetPinDirection+0x4c>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	11 f1       	breq	.+68     	; 0x110 <DIO_voidSetPinDirection+0x62>
  cc:	08 95       	ret
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x2c>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x28>
  de:	82 2b       	or	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	08 95       	ret
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x42>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x3e>
  f4:	82 2b       	or	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x58>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x54>
 10a:	82 2b       	or	r24, r18
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	08 95       	ret
 110:	21 b3       	in	r18, 0x11	; 17
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x6e>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x6a>
 120:	82 2b       	or	r24, r18
 122:	81 bb       	out	0x11, r24	; 17
 124:	08 95       	ret
 126:	41 11       	cpse	r20, r1
 128:	37 c0       	rjmp	.+110    	; 0x198 <DIO_voidSetPinDirection+0xea>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_voidSetPinDirection+0xa4>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_voidSetPinDirection+0x8c>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_voidSetPinDirection+0xbc>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_voidSetPinDirection+0xd4>
 138:	08 95       	ret
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0x98>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0x94>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0xb0>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0xac>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xc8>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xc4>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinDirection+0xe0>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinDirection+0xdc>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

0000019a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
	
	/*		Range Check			*/
	if((PORTID < 4) && (PINID < 8))
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	70 f5       	brcc	.+92     	; 0x1fa <DIO_u8GetPinValue+0x60>
 19e:	68 30       	cpi	r22, 0x08	; 8
 1a0:	70 f5       	brcc	.+92     	; 0x1fe <DIO_u8GetPinValue+0x64>
	{

			switch (PORTID)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	79 f0       	breq	.+30     	; 0x1c4 <DIO_u8GetPinValue+0x2a>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_u8GetPinValue+0x18>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <DIO_u8GetPinValue+0x3c>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <DIO_u8GetPinValue+0x4e>
 1b0:	28 c0       	rjmp	.+80     	; 0x202 <DIO_u8GetPinValue+0x68>
			{
			//PIN REGISTER is responsible for input
			case PORTA	:	Local_u8Data =  	GET_BIT(PINA_REG, PINID);		break; 
 1b2:	89 b3       	in	r24, 0x19	; 25
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_u8GetPinValue+0x22>
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_u8GetPinValue+0x1e>
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	08 95       	ret
			case PORTB	:	Local_u8Data =  	GET_BIT(PINB_REG, PINID);		break; 
 1c4:	86 b3       	in	r24, 0x16	; 22
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_u8GetPinValue+0x34>
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_u8GetPinValue+0x30>
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	08 95       	ret
			case PORTC	:	Local_u8Data =  	GET_BIT(PINC_REG, PINID);		break; 
 1d6:	83 b3       	in	r24, 0x13	; 19
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_u8GetPinValue+0x46>
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_u8GetPinValue+0x42>
 1e4:	81 70       	andi	r24, 0x01	; 1
 1e6:	08 95       	ret
			case PORTD	:	Local_u8Data =  	GET_BIT(PIND_REG, PINID);		break; 
 1e8:	80 b3       	in	r24, 0x10	; 16
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8GetPinValue+0x58>
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8GetPinValue+0x54>
 1f6:	81 70       	andi	r24, 0x01	; 1
 1f8:	08 95       	ret
}


u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	08 95       	ret
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	08 95       	ret
 202:	8f ef       	ldi	r24, 0xFF	; 255
	else 
	{
			/*	Return ERROR 	*/
	}
	return Local_u8Data;
}
 204:	08 95       	ret

Disassembly of section .text.__vector_1:

00000206 <__vector_1>:
void EXTI0_voidDisableInterrupt(void)
{
	CLR_BIT(GICR,6); //hwa katebha set 
}
void __vector_1	(void)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	
	/*	Solutions that weren't possible -- only for illustration					*/
	/*	pf();		 	-- address of the function 									*/
	/*	EXTI0_fun(); 	-- can't call the function here -- it's in the main.c 		*/
	
	EXTI0_CallBack();
 228:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 230:	09 95       	icall
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

Disassembly of section .text.main:

00000254 <main>:

int main(void)
{

	/*	SPI Master Init	*/
	SPI_initMaster();
 254:	0e 94 4c 01 	call	0x298	; 0x298 <SPI_initMaster>

	
	while(1)
	{
		if(DIO_u8GetPinValue(PORTA, PIN0) == 0)//button pressed
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_u8GetPinValue>
 260:	81 11       	cpse	r24, r1
 262:	0a c0       	rjmp	.+20     	; 0x278 <main+0x24>
		{
			SPI_sendByte('1');
 264:	81 e3       	ldi	r24, 0x31	; 49
 266:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_sendByte>
			while(DIO_u8GetPinValue(PORTA, PIN0) == 0);		//Wait until Unpressed
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_u8GetPinValue>
 272:	88 23       	and	r24, r24
 274:	d1 f3       	breq	.-12     	; 0x26a <main+0x16>
 276:	f0 cf       	rjmp	.-32     	; 0x258 <main+0x4>
			
		}
		else if(DIO_u8GetPinValue(PORTA, PIN0) == 1)//button unpressed
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_u8GetPinValue>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	51 f7       	brne	.-44     	; 0x258 <main+0x4>
		{
			SPI_sendByte('0');
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SPI_sendByte>
			while(DIO_u8GetPinValue(PORTA, PIN0) == 1);	  //Wait until Pressed
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_u8GetPinValue>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	d1 f3       	breq	.-12     	; 0x28a <main+0x36>
 296:	e0 cf       	rjmp	.-64     	; 0x258 <main+0x4>

Disassembly of section .text.SPI_initMaster:

00000298 <SPI_initMaster>:
		//CLR_BIT(SPCR, SPR1_bit);		//	SPI Clock Rate Select
		//CLR_BIT(SPCR, SPR0_bit);		//	SPI Clock Rate Select		//	Master Mode		
		//CLR_BIT(SPCR, MSTR_bit);		//	Master/Slave Select
				
		//	Enable SPI
		SET_BIT(SPCR, SPE_bit);			//	SPI Enable
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	65 e0       	ldi	r22, 0x05	; 5
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 2c0:	8d b1       	in	r24, 0x0d	; 13
 2c2:	80 61       	ori	r24, 0x10	; 16
 2c4:	8d b9       	out	0x0d, r24	; 13
 2c6:	8d b1       	in	r24, 0x0d	; 13
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	8d b9       	out	0x0d, r24	; 13
 2cc:	08 95       	ret

Disassembly of section .text.SPI_sendByte:

000002f8 <SPI_sendByte>:
}

void	SPI_sendByte(u8 data)
{
		//	Send Data by SPI
		SPDR = data; 
 2f8:	8f b9       	out	0x0f, r24	; 15
		
		//	Wait until SPI Interrupt Flag = 1 (data sent correctly)
		while(GET_BIT(SPSR, SPIF_bit)==0);
 2fa:	77 9b       	sbis	0x0e, 7	; 14
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <SPI_sendByte+0x2>
}
 2fe:	08 95       	ret

Disassembly of section .text.__vector_11:

000002e4 <__vector_11>:

u32 ISR_Counter	= 0;
u32 time_counter = 0;

ISR (TIMER0_OVF_vect)				
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
	// do nothing 
}
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000308 <_fini>:
 308:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000030a <__funcs_on_exit>:
 30a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000030c <__simulator_exit>:
 30c:	08 95       	ret

Disassembly of section .text.exit:

000002ce <exit>:
 2ce:	ec 01       	movw	r28, r24
 2d0:	0e 94 85 01 	call	0x30a	; 0x30a <__funcs_on_exit>
 2d4:	0e 94 84 01 	call	0x308	; 0x308 <_fini>
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 86 01 	call	0x30c	; 0x30c <__simulator_exit>
 2de:	ce 01       	movw	r24, r28
 2e0:	0e 94 82 01 	call	0x304	; 0x304 <_Exit>

Disassembly of section .text._Exit:

00000304 <_Exit>:
 304:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
