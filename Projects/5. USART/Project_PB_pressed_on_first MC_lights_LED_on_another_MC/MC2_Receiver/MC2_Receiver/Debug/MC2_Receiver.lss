
MC2_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000558  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e05  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000942  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000245  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000832  00000000  00000000  00003c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000447b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004b6  000004b6  0000054a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000457c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000ec  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000ec  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_voidSetPortValue 00000024  00000434  00000434  000004c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_voidSetPortDirection 00000024  00000458  00000458  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_1 0000004e  00000326  00000326  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.EXTI0_CallBack 00000002  00800060  00800060  00000558  2**0
                  ALLOC
 20 .text.LCD_voidSendCMD 00000050  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_voidInit 0000003c  000003f8  000003f8  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_voidWriteData 00000050  000002d6  000002d6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_clear 00000008  000004a6  000004a6  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    00000046  00000374  00000374  00000408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_11 00000014  00000492  00000492  00000526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_Init 0000003e  000003ba  000003ba  0000044e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.UART_RecieveByte 00000008  000004ae  000004ae  00000542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  000004be  000004be  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  000004c0  000004c0  00000554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  000004c2  000004c2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  0000047c  0000047c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  000004ba  000004ba  0000054e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_1>
   8:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
   c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  10:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  14:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  18:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  1c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  20:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  24:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  28:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  2c:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_11>
  30:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  34:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  38:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  3c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  40:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  44:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  48:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  4c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>
  50:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  a6:	0c 94 3e 02 	jmp	0x47c	; 0x47c <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000004b6 <__bad_interrupt>:
 4b6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

000000ae <DIO_voidSetPinDirection>:
	else 
	{
			/*	Return ERROR 	*/
	}
	return Local_u8Data;
}
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	08 f0       	brcs	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x6>
  b2:	72 c0       	rjmp	.+228    	; 0x198 <DIO_voidSetPinDirection+0xea>
  b4:	68 30       	cpi	r22, 0x08	; 8
  b6:	08 f0       	brcs	.+2      	; 0xba <DIO_voidSetPinDirection+0xc>
  b8:	6f c0       	rjmp	.+222    	; 0x198 <DIO_voidSetPinDirection+0xea>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	a1 f5       	brne	.+104    	; 0x126 <DIO_voidSetPinDirection+0x78>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	89 f0       	breq	.+34     	; 0xe4 <DIO_voidSetPinDirection+0x36>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_voidSetPinDirection+0x20>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	c9 f0       	breq	.+50     	; 0xfa <DIO_voidSetPinDirection+0x4c>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	11 f1       	breq	.+68     	; 0x110 <DIO_voidSetPinDirection+0x62>
  cc:	08 95       	ret
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x2c>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x28>
  de:	82 2b       	or	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	08 95       	ret
  e4:	27 b3       	in	r18, 0x17	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_voidSetPinDirection+0x42>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_voidSetPinDirection+0x3e>
  f4:	82 2b       	or	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x58>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x54>
 10a:	82 2b       	or	r24, r18
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	08 95       	ret
 110:	21 b3       	in	r18, 0x11	; 17
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x6e>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x6a>
 120:	82 2b       	or	r24, r18
 122:	81 bb       	out	0x11, r24	; 17
 124:	08 95       	ret
 126:	41 11       	cpse	r20, r1
 128:	37 c0       	rjmp	.+110    	; 0x198 <DIO_voidSetPinDirection+0xea>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 f0       	breq	.+36     	; 0x152 <DIO_voidSetPinDirection+0xa4>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_voidSetPinDirection+0x8c>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_voidSetPinDirection+0xbc>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_voidSetPinDirection+0xd4>
 138:	08 95       	ret
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0x98>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0x94>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0xb0>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0xac>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xc8>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xc4>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinDirection+0xe0>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinDirection+0xdc>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

0000019a <DIO_voidSetPinValue>:
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <DIO_voidSetPinValue+0x6>
 19e:	72 c0       	rjmp	.+228    	; 0x284 <DIO_voidSetPinValue+0xea>
 1a0:	68 30       	cpi	r22, 0x08	; 8
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <DIO_voidSetPinValue+0xc>
 1a4:	6f c0       	rjmp	.+222    	; 0x284 <DIO_voidSetPinValue+0xea>
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	a1 f5       	brne	.+104    	; 0x212 <DIO_voidSetPinValue+0x78>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	89 f0       	breq	.+34     	; 0x1d0 <DIO_voidSetPinValue+0x36>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <DIO_voidSetPinValue+0x20>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	c9 f0       	breq	.+50     	; 0x1e6 <DIO_voidSetPinValue+0x4c>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	11 f1       	breq	.+68     	; 0x1fc <DIO_voidSetPinValue+0x62>
 1b8:	08 95       	ret
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinValue+0x2c>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinValue+0x28>
 1ca:	82 2b       	or	r24, r18
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
 1d0:	28 b3       	in	r18, 0x18	; 24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x42>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x3e>
 1e0:	82 2b       	or	r24, r18
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	08 95       	ret
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinValue+0x58>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinValue+0x54>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
 1fc:	22 b3       	in	r18, 0x12	; 18
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x6e>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x6a>
 20c:	82 2b       	or	r24, r18
 20e:	82 bb       	out	0x12, r24	; 18
 210:	08 95       	ret
 212:	41 11       	cpse	r20, r1
 214:	37 c0       	rjmp	.+110    	; 0x284 <DIO_voidSetPinValue+0xea>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 f0       	breq	.+36     	; 0x23e <DIO_voidSetPinValue+0xa4>
 21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_voidSetPinValue+0x8c>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	d9 f0       	breq	.+54     	; 0x256 <DIO_voidSetPinValue+0xbc>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	29 f1       	breq	.+74     	; 0x26e <DIO_voidSetPinValue+0xd4>
 224:	08 95       	ret
 226:	2b b3       	in	r18, 0x1b	; 27
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinValue+0x98>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinValue+0x94>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0xb0>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0xac>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinValue+0xc8>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinValue+0xc4>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_voidSetPinValue+0xe0>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_voidSetPinValue+0xdc>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	82 bb       	out	0x12, r24	; 18
 284:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortValue:

00000434 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 PORTID, u8 Value)
{
	
	/*		Range Check			*/
	if (PORTID < 4)
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	78 f4       	brcc	.+30     	; 0x456 <DIO_voidSetPortValue+0x22>
	{
		switch (PORTID)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	41 f0       	breq	.+16     	; 0x44c <DIO_voidSetPortValue+0x18>
 43c:	28 f0       	brcs	.+10     	; 0x448 <DIO_voidSetPortValue+0x14>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	39 f0       	breq	.+14     	; 0x450 <DIO_voidSetPortValue+0x1c>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	39 f0       	breq	.+14     	; 0x454 <DIO_voidSetPortValue+0x20>
 446:	08 95       	ret
			{	
			case PORTA	: 	PORTA_REG = Value;		break; 
 448:	6b bb       	out	0x1b, r22	; 27
 44a:	08 95       	ret
			case PORTB	: 	PORTB_REG = Value;		break; 
 44c:	68 bb       	out	0x18, r22	; 24
 44e:	08 95       	ret
			case PORTC	: 	PORTC_REG = Value;		break; 
 450:	65 bb       	out	0x15, r22	; 21
 452:	08 95       	ret
			case PORTD	: 	PORTD_REG = Value;		break; 
 454:	62 bb       	out	0x12, r22	; 18
 456:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDirection:

00000458 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 PORTID, u8 Direction)
{
	
	/*		Range Check			*/
	if (PORTID < 4)
 458:	84 30       	cpi	r24, 0x04	; 4
 45a:	78 f4       	brcc	.+30     	; 0x47a <DIO_voidSetPortDirection+0x22>
	{
		switch (PORTID)
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	41 f0       	breq	.+16     	; 0x470 <DIO_voidSetPortDirection+0x18>
 460:	28 f0       	brcs	.+10     	; 0x46c <DIO_voidSetPortDirection+0x14>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	39 f0       	breq	.+14     	; 0x474 <DIO_voidSetPortDirection+0x1c>
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	39 f0       	breq	.+14     	; 0x478 <DIO_voidSetPortDirection+0x20>
 46a:	08 95       	ret
			{	
			case PORTA	: 	DDRA_REG = Direction;		break; 
 46c:	6a bb       	out	0x1a, r22	; 26
 46e:	08 95       	ret
			case PORTB	: 	DDRB_REG = Direction;		break; 
 470:	67 bb       	out	0x17, r22	; 23
 472:	08 95       	ret
			case PORTC	: 	DDRC_REG = Direction;		break; 
 474:	64 bb       	out	0x14, r22	; 20
 476:	08 95       	ret
			case PORTD	: 	DDRD_REG = Direction;		break; 
 478:	61 bb       	out	0x11, r22	; 17
 47a:	08 95       	ret

Disassembly of section .text.__vector_1:

00000326 <__vector_1>:
void EXTI0_voidDisableInterrupt(void)
{
	CLR_BIT(GICR,6); //hwa katebha set 
}
void __vector_1	(void)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	
	/*	Solutions that weren't possible -- only for illustration					*/
	/*	pf();		 	-- address of the function 									*/
	/*	EXTI0_fun(); 	-- can't call the function here -- it's in the main.c 		*/
	
	EXTI0_CallBack();
 348:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 350:	09 95       	icall
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

Disassembly of section .text.LCD_voidSendCMD:

00000286 <LCD_voidSendCMD>:
	for (int i=0; i<column; i++)
	{
		LCD_cursor_shift_right();
	}
	
}
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 2a8:	6c 2f       	mov	r22, r28
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_voidSetPortValue>
 2b0:	87 e8       	ldi	r24, 0x87	; 135
 2b2:	93 e1       	ldi	r25, 0x13	; 19
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_voidSendCMD+0x2e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_voidSendCMD+0x34>
 2ba:	00 00       	nop
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 2c6:	87 e8       	ldi	r24, 0x87	; 135
 2c8:	93 e1       	ldi	r25, 0x13	; 19
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_voidSendCMD+0x44>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_voidSendCMD+0x4a>
 2d0:	00 00       	nop
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

000003f8 <LCD_voidInit>:
 3f8:	6f ef       	ldi	r22, 0xFF	; 255
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidSetPortDirection>
 400:	6f ef       	ldi	r22, 0xFF	; 255
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidSetPortDirection>
 408:	81 ef       	ldi	r24, 0xF1	; 241
 40a:	9b e2       	ldi	r25, 0x2B	; 43
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	88 e3       	ldi	r24, 0x38	; 56
 416:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 41a:	8e e0       	ldi	r24, 0x0E	; 14
 41c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 432:	08 95       	ret

Disassembly of section .text.LCD_voidWriteData:

000002d6 <LCD_voidWriteData>:
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 2f8:	6c 2f       	mov	r22, r28
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_voidSetPortValue>
 300:	83 ed       	ldi	r24, 0xD3	; 211
 302:	90 e3       	ldi	r25, 0x30	; 48
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_voidWriteData+0x2e>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_voidWriteData+0x34>
 30a:	00 00       	nop
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_voidSetPinValue>
 316:	83 ed       	ldi	r24, 0xD3	; 211
 318:	90 e3       	ldi	r25, 0x30	; 48
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_voidWriteData+0x44>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_voidWriteData+0x4a>
 320:	00 00       	nop
 322:	cf 91       	pop	r28
 324:	08 95       	ret

Disassembly of section .text.LCD_clear:

000004a6 <LCD_clear>:

void LCD_clear(void)						//done by me 
{
	  LCD_voidSendCMD(clear_display);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 43 01 	call	0x286	; 0x286 <LCD_voidSendCMD>
 4ac:	08 95       	ret

Disassembly of section .text.main:

00000374 <main>:
#include <avr/delay.h>

int main(void)
{
		/*	LCD_Init	*/
		LCD_voidInit();
 374:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_voidInit>

		/*	UART Init	*/
		UART_Init(); 
 378:	0e 94 dd 01 	call	0x3ba	; 0x3ba <UART_Init>

		/*	Configure the LED Pins as output		*/
		DIO_voidSetPinDirection(PORTC, PIN0, OUTPUT);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		
				
	while(1)
    {	
		
			Byte = UART_RecieveByte();
 386:	0e 94 57 02 	call	0x4ae	; 0x4ae <UART_RecieveByte>
 38a:	c8 2f       	mov	r28, r24
			LCD_clear();
 38c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_clear>
			LCD_voidWriteData(Byte);
 390:	8c 2f       	mov	r24, r28
 392:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_voidWriteData>
		

		   /**				PB1 + LED1				**/
		   if (Byte == '0')
 396:	c0 33       	cpi	r28, 0x30	; 48
 398:	39 f4       	brne	.+14     	; 0x3a8 <main+0x34>
			{
			   TOG_BIT(PORTC_REG, PIN0);
 39a:	95 b3       	in	r25, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	89 27       	eor	r24, r25
 3a0:	85 bb       	out	0x15, r24	; 21
			   while (Byte == '0')
 3a2:	c0 33       	cpi	r28, 0x30	; 48
 3a4:	f1 f3       	breq	.-4      	; 0x3a2 <main+0x2e>
 3a6:	ef cf       	rjmp	.-34     	; 0x386 <main+0x12>
			   {
				   //wait 
			   }
			}
		   else if (Byte == '1')
 3a8:	c1 33       	cpi	r28, 0x31	; 49
 3aa:	69 f7       	brne	.-38     	; 0x386 <main+0x12>
			{
			   TOG_BIT(PORTC_REG, PIN1);
 3ac:	95 b3       	in	r25, 0x15	; 21
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	89 27       	eor	r24, r25
 3b2:	85 bb       	out	0x15, r24	; 21
			   while (Byte == '1')
 3b4:	c1 33       	cpi	r28, 0x31	; 49
 3b6:	f1 f3       	breq	.-4      	; 0x3b4 <main+0x40>
 3b8:	e6 cf       	rjmp	.-52     	; 0x386 <main+0x12>

Disassembly of section .text.__vector_11:

00000492 <__vector_11>:

u32 ISR_Counter	= 0;
u32 time_counter = 0;

ISR (TIMER0_OVF_vect)				
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
	// do nothing 
}
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

Disassembly of section .text.UART_Init:

000003ba <UART_Init>:
{
		/* Wait for empty transmit buffer */
		while ( (GET_BIT(UCSRA, UDRE_bit)) == 0 );
		
		/* Put data into buffer, sends the data */
		UDR = Byte;								//	Data is put into the UDR (Read)
 3ba:	8a b1       	in	r24, 0x0a	; 10
 3bc:	88 60       	ori	r24, 0x08	; 8
 3be:	8a b9       	out	0x0a, r24	; 10
 3c0:	8a b1       	in	r24, 0x0a	; 10
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	8a b9       	out	0x0a, r24	; 10
 3c6:	80 b5       	in	r24, 0x20	; 32
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	80 bd       	out	0x20, r24	; 32
 3cc:	80 b5       	in	r24, 0x20	; 32
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 bd       	out	0x20, r24	; 32
 3d2:	80 b5       	in	r24, 0x20	; 32
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	8f 7e       	andi	r24, 0xEF	; 239
 3dc:	80 bd       	out	0x20, r24	; 32
 3de:	80 b5       	in	r24, 0x20	; 32
 3e0:	8f 7d       	andi	r24, 0xDF	; 223
 3e2:	80 bd       	out	0x20, r24	; 32
 3e4:	80 b5       	in	r24, 0x20	; 32
 3e6:	87 7f       	andi	r24, 0xF7	; 247
 3e8:	80 bd       	out	0x20, r24	; 32
 3ea:	80 b5       	in	r24, 0x20	; 32
 3ec:	8f 7b       	andi	r24, 0xBF	; 191
 3ee:	80 bd       	out	0x20, r24	; 32
 3f0:	10 bc       	out	0x20, r1	; 32
 3f2:	87 e6       	ldi	r24, 0x67	; 103
 3f4:	89 b9       	out	0x09, r24	; 9
 3f6:	08 95       	ret

Disassembly of section .text.UART_RecieveByte:

000004ae <UART_RecieveByte>:
}

u8 UART_RecieveByte (void)
{
		//Wait until the receive is complete  
		while (	GET_BIT(UCSRA,RXC_bit) == 0);	/* Wait till data is received (to the UDR)	*/
 4ae:	5f 9b       	sbis	0x0b, 7	; 11
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <UART_RecieveByte>
		//Return the received data 
		return(UDR);							/* Return the byte (3ashan el Data fel UDR)  */
 4b2:	8c b1       	in	r24, 0x0c	; 12
 4b4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004be <_fini>:
 4be:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004c0 <__funcs_on_exit>:
 4c0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004c2 <__simulator_exit>:
 4c2:	08 95       	ret

Disassembly of section .text.exit:

0000047c <exit>:
 47c:	ec 01       	movw	r28, r24
 47e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__funcs_on_exit>
 482:	0e 94 5f 02 	call	0x4be	; 0x4be <_fini>
 486:	ce 01       	movw	r24, r28
 488:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__simulator_exit>
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Exit>

Disassembly of section .text._Exit:

000004ba <_Exit>:
 4ba:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
