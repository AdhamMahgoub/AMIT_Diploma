
DIO_Driver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000446  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5e  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040b  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043f  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003c4  000003c4  00000438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000ec  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000ec  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_u8GetPinValue 0000006c  00000342  00000342  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    000000fe  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000003cc  000003cc  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000003ce  000003ce  00000442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000003d0  000003d0  00000444  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000003ae  000003ae  00000422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000003c8  000003c8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
   8:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
   c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  10:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  14:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  18:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  1c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  20:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  24:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  28:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  2c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  30:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  34:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  38:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  3c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  40:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  44:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  48:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  4c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>
  50:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000003c4 <__bad_interrupt>:
 3c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

0000016a <DIO_voidSetPinDirection>:

//DIO_voidSetPinDirection(PORTA, PIN0, OUTPUT)
void DIO_voidSetPinDirection (u8 PORTID, u8 PINID, u8 Direction)
{
	/*range check*/
	if((PORTID < 4) && (PINID < 8))
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	08 f0       	brcs	.+2      	; 0x170 <DIO_voidSetPinDirection+0x6>
 16e:	72 c0       	rjmp	.+228    	; 0x254 <DIO_voidSetPinDirection+0xea>
 170:	68 30       	cpi	r22, 0x08	; 8
 172:	08 f0       	brcs	.+2      	; 0x176 <DIO_voidSetPinDirection+0xc>
 174:	6f c0       	rjmp	.+222    	; 0x254 <DIO_voidSetPinDirection+0xea>
	{
		if (Direction == OUTPUT)
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	a1 f5       	brne	.+104    	; 0x1e2 <DIO_voidSetPinDirection+0x78>
		{
			switch (PORTID)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	89 f0       	breq	.+34     	; 0x1a0 <DIO_voidSetPinDirection+0x36>
 17e:	28 f0       	brcs	.+10     	; 0x18a <DIO_voidSetPinDirection+0x20>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	c9 f0       	breq	.+50     	; 0x1b6 <DIO_voidSetPinDirection+0x4c>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	11 f1       	breq	.+68     	; 0x1cc <DIO_voidSetPinDirection+0x62>
 188:	08 95       	ret
			{	
			case PORTA	: 	SET_BIT(DDRA_REG, PINID);		break; 
 18a:	2a b3       	in	r18, 0x1a	; 26
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_voidSetPinDirection+0x2c>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_voidSetPinDirection+0x28>
 19a:	82 2b       	or	r24, r18
 19c:	8a bb       	out	0x1a, r24	; 26
 19e:	08 95       	ret
			case PORTB	: 	SET_BIT(DDRB_REG, PINID);		break; 
 1a0:	27 b3       	in	r18, 0x17	; 23
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_voidSetPinDirection+0x42>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_voidSetPinDirection+0x3e>
 1b0:	82 2b       	or	r24, r18
 1b2:	87 bb       	out	0x17, r24	; 23
 1b4:	08 95       	ret
			case PORTC	: 	SET_BIT(DDRC_REG, PINID);		break; 
 1b6:	24 b3       	in	r18, 0x14	; 20
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_voidSetPinDirection+0x58>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_voidSetPinDirection+0x54>
 1c6:	82 2b       	or	r24, r18
 1c8:	84 bb       	out	0x14, r24	; 20
 1ca:	08 95       	ret
			case PORTD	: 	SET_BIT(DDRD_REG, PINID);		break; 
 1cc:	21 b3       	in	r18, 0x11	; 17
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_voidSetPinDirection+0x6e>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_voidSetPinDirection+0x6a>
 1dc:	82 2b       	or	r24, r18
 1de:	81 bb       	out	0x11, r24	; 17
 1e0:	08 95       	ret
			}
		}
			
	
	
		else if (Direction == INPUT) 
 1e2:	41 11       	cpse	r20, r1
 1e4:	37 c0       	rjmp	.+110    	; 0x254 <DIO_voidSetPinDirection+0xea>
		{
			switch (PORTID)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_voidSetPinDirection+0xa4>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_voidSetPinDirection+0x8c>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_voidSetPinDirection+0xbc>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_voidSetPinDirection+0xd4>
 1f4:	08 95       	ret
			{	
			case PORTA	: 	CLR_BIT(DDRA_REG, PINID);		break; 
 1f6:	2a b3       	in	r18, 0x1a	; 26
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_voidSetPinDirection+0x98>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_voidSetPinDirection+0x94>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
			case PORTB	: 	CLR_BIT(DDRB_REG, PINID);		break; 
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_voidSetPinDirection+0xb0>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_voidSetPinDirection+0xac>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	87 bb       	out	0x17, r24	; 23
 224:	08 95       	ret
			case PORTC	: 	CLR_BIT(DDRC_REG, PINID);		break; 
 226:	24 b3       	in	r18, 0x14	; 20
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinDirection+0xc8>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinDirection+0xc4>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	84 bb       	out	0x14, r24	; 20
 23c:	08 95       	ret
			case PORTD	: 	CLR_BIT(DDRD_REG, PINID);		break; 
 23e:	21 b3       	in	r18, 0x11	; 17
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinDirection+0xe0>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinDirection+0xdc>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	81 bb       	out	0x11, r24	; 17
 254:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

00000256 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 PORTID, u8 PINID, u8 Value)
{
	/*range check*/
	if((PORTID < 4) && (PINID < 8))
 256:	84 30       	cpi	r24, 0x04	; 4
 258:	08 f0       	brcs	.+2      	; 0x25c <DIO_voidSetPinValue+0x6>
 25a:	72 c0       	rjmp	.+228    	; 0x340 <DIO_voidSetPinValue+0xea>
 25c:	68 30       	cpi	r22, 0x08	; 8
 25e:	08 f0       	brcs	.+2      	; 0x262 <DIO_voidSetPinValue+0xc>
 260:	6f c0       	rjmp	.+222    	; 0x340 <DIO_voidSetPinValue+0xea>
	{
		if (Value == HIGH)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	a1 f5       	brne	.+104    	; 0x2ce <DIO_voidSetPinValue+0x78>
		{
			switch (PORTID)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	89 f0       	breq	.+34     	; 0x28c <DIO_voidSetPinValue+0x36>
 26a:	28 f0       	brcs	.+10     	; 0x276 <DIO_voidSetPinValue+0x20>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <DIO_voidSetPinValue+0x4c>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	11 f1       	breq	.+68     	; 0x2b8 <DIO_voidSetPinValue+0x62>
 274:	08 95       	ret
			{	
			case PORTA	: 	SET_BIT(PORTA_REG, PINID);		break; 
 276:	2b b3       	in	r18, 0x1b	; 27
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_voidSetPinValue+0x2c>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_voidSetPinValue+0x28>
 286:	82 2b       	or	r24, r18
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	08 95       	ret
			case PORTB	: 	SET_BIT(PORTB_REG, PINID);		break; 
 28c:	28 b3       	in	r18, 0x18	; 24
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinValue+0x42>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinValue+0x3e>
 29c:	82 2b       	or	r24, r18
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	08 95       	ret
			case PORTC	: 	SET_BIT(PORTC_REG, PINID);		break; 
 2a2:	25 b3       	in	r18, 0x15	; 21
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_voidSetPinValue+0x58>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_voidSetPinValue+0x54>
 2b2:	82 2b       	or	r24, r18
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	08 95       	ret
			case PORTD	: 	SET_BIT(PORTD_REG, PINID);		break; 
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_voidSetPinValue+0x6e>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_voidSetPinValue+0x6a>
 2c8:	82 2b       	or	r24, r18
 2ca:	82 bb       	out	0x12, r24	; 18
 2cc:	08 95       	ret
			}
		}
			
	
	
		else if (Value == LOW) 
 2ce:	41 11       	cpse	r20, r1
 2d0:	37 c0       	rjmp	.+110    	; 0x340 <DIO_voidSetPinValue+0xea>
		{
			switch (PORTID)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	91 f0       	breq	.+36     	; 0x2fa <DIO_voidSetPinValue+0xa4>
 2d6:	28 f0       	brcs	.+10     	; 0x2e2 <DIO_voidSetPinValue+0x8c>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	d9 f0       	breq	.+54     	; 0x312 <DIO_voidSetPinValue+0xbc>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	29 f1       	breq	.+74     	; 0x32a <DIO_voidSetPinValue+0xd4>
 2e0:	08 95       	ret
			{	
			case PORTA	: 	CLR_BIT(PORTA_REG, PINID);		break; 
 2e2:	2b b3       	in	r18, 0x1b	; 27
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPinValue+0x98>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPinValue+0x94>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	08 95       	ret
			case PORTB	: 	CLR_BIT(PORTB_REG, PINID);		break; 
 2fa:	28 b3       	in	r18, 0x18	; 24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinValue+0xb0>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinValue+0xac>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	88 bb       	out	0x18, r24	; 24
 310:	08 95       	ret
			case PORTC	: 	CLR_BIT(PORTC_REG, PINID);		break; 
 312:	25 b3       	in	r18, 0x15	; 21
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_voidSetPinValue+0xc8>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_voidSetPinValue+0xc4>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	85 bb       	out	0x15, r24	; 21
 328:	08 95       	ret
			case PORTD	: 	CLR_BIT(PORTD_REG, PINID);		break; 
 32a:	22 b3       	in	r18, 0x12	; 18
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_voidSetPinValue+0xe0>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_voidSetPinValue+0xdc>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	82 bb       	out	0x12, r24	; 18
 340:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000342 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
	
	/*range check*/
	if((PORTID < 4) && (PINID < 8))
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	70 f5       	brcc	.+92     	; 0x3a2 <DIO_u8GetPinValue+0x60>
 346:	68 30       	cpi	r22, 0x08	; 8
 348:	70 f5       	brcc	.+92     	; 0x3a6 <DIO_u8GetPinValue+0x64>
	{

			switch (PORTID)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	79 f0       	breq	.+30     	; 0x36c <DIO_u8GetPinValue+0x2a>
 34e:	28 f0       	brcs	.+10     	; 0x35a <DIO_u8GetPinValue+0x18>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	a9 f0       	breq	.+42     	; 0x37e <DIO_u8GetPinValue+0x3c>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	e1 f0       	breq	.+56     	; 0x390 <DIO_u8GetPinValue+0x4e>
 358:	28 c0       	rjmp	.+80     	; 0x3aa <DIO_u8GetPinValue+0x68>
			{	
			case PORTA	:	Local_u8Data =  	GET_BIT(PINA_REG, PINID);		break; 
 35a:	89 b3       	in	r24, 0x19	; 25
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_u8GetPinValue+0x22>
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_u8GetPinValue+0x1e>
 368:	81 70       	andi	r24, 0x01	; 1
 36a:	08 95       	ret
			case PORTB	:	Local_u8Data =  	GET_BIT(PINB_REG, PINID);		break; 
 36c:	86 b3       	in	r24, 0x16	; 22
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_u8GetPinValue+0x34>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_u8GetPinValue+0x30>
 37a:	81 70       	andi	r24, 0x01	; 1
 37c:	08 95       	ret
			case PORTC	:	Local_u8Data =  	GET_BIT(PINC_REG, PINID);		break; 
 37e:	83 b3       	in	r24, 0x13	; 19
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_u8GetPinValue+0x46>
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_u8GetPinValue+0x42>
 38c:	81 70       	andi	r24, 0x01	; 1
 38e:	08 95       	ret
			case PORTD	:	Local_u8Data =  	GET_BIT(PIND_REG, PINID);		break; 
 390:	80 b3       	in	r24, 0x10	; 16
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8GetPinValue+0x58>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8GetPinValue+0x54>
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	08 95       	ret
}


u8 DIO_u8GetPinValue (u8 PORTID, u8 PINID)
{
	u8 Local_u8Data = 0xFF; 
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	08 95       	ret
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	08 95       	ret
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
	else 
	{
			/*	return ERROR 	*/
	}
	return Local_u8Data;
 3ac:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
#include <util/delay.h>

int main(void)
{

    DIO_voidSetPinDirection (PORTA, PIN0, OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (PORTA, PIN1, OUTPUT);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (PORTA, PIN2, OUTPUT);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>
	
	DIO_voidSetPinDirection (PORTB, PIN0, INPUT);
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (PORTB, PIN1, INPUT);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (PORTB, PIN2, INPUT);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_voidSetPinDirection>

	
	while(1)
	{
		
		DIO_voidSetPinValue(PORTA, PIN0, DIO_u8GetPinValue(PORTB, PIN0)); 
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_u8GetPinValue>
  b0:	48 2f       	mov	r20, r24
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f eb       	ldi	r18, 0xBF	; 191
  bc:	87 e2       	ldi	r24, 0x27	; 39
  be:	99 e0       	ldi	r25, 0x09	; 9
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x5e>
  ca:	00 00       	nop
		_delay_ms(3000);
		
		DIO_voidSetPinValue(PORTA, PIN0, LOW); 
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
  d6:	2f eb       	ldi	r18, 0xBF	; 191
  d8:	87 e2       	ldi	r24, 0x27	; 39
  da:	99 e0       	ldi	r25, 0x09	; 9
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x70>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x7a>
  e6:	00 00       	nop
		_delay_ms(3000);
		

		
		DIO_voidSetPinValue(PORTA, PIN1, DIO_u8GetPinValue(PORTB, PIN1));
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_u8GetPinValue>
  f0:	48 2f       	mov	r20, r24
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
  fa:	2f eb       	ldi	r18, 0xBF	; 191
  fc:	87 e2       	ldi	r24, 0x27	; 39
  fe:	99 e0       	ldi	r25, 0x09	; 9
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x94>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x9e>
 10a:	00 00       	nop
		_delay_ms(3000);
		
		DIO_voidSetPinValue(PORTA, PIN1, LOW);
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
 116:	2f eb       	ldi	r18, 0xBF	; 191
 118:	87 e2       	ldi	r24, 0x27	; 39
 11a:	99 e0       	ldi	r25, 0x09	; 9
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0xb0>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xba>
 126:	00 00       	nop
		_delay_ms(3000);
		
		
		DIO_voidSetPinValue(PORTA, PIN2, DIO_u8GetPinValue(PORTB, PIN2));
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_u8GetPinValue>
 130:	48 2f       	mov	r20, r24
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
 13a:	2f eb       	ldi	r18, 0xBF	; 191
 13c:	87 e2       	ldi	r24, 0x27	; 39
 13e:	99 e0       	ldi	r25, 0x09	; 9
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xd4>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xde>
 14a:	00 00       	nop
		_delay_ms(3000);
		
		DIO_voidSetPinValue(PORTA, PIN2, LOW);
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidSetPinValue>
 156:	2f eb       	ldi	r18, 0xBF	; 191
 158:	87 e2       	ldi	r24, 0x27	; 39
 15a:	99 e0       	ldi	r25, 0x09	; 9
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xf0>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xfa>
 166:	00 00       	nop
 168:	9f cf       	rjmp	.-194    	; 0xa8 <main+0x3c>

Disassembly of section .text.__dummy_fini:

000003cc <_fini>:
 3cc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003ce <__funcs_on_exit>:
 3ce:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003d0 <__simulator_exit>:
 3d0:	08 95       	ret

Disassembly of section .text.exit:

000003ae <exit>:
 3ae:	ec 01       	movw	r28, r24
 3b0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__funcs_on_exit>
 3b4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_fini>
 3b8:	ce 01       	movw	r24, r28
 3ba:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__simulator_exit>
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Exit>

Disassembly of section .text._Exit:

000003c8 <_Exit>:
 3c8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
